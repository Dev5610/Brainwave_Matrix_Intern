import re

def assess_password_strength(password):
    """
    Assess the strength of a password based on length, complexity, and uniqueness.

    Args:
        password (str): The password to assess.

    Returns:
        dict: A dictionary containing the password strength assessment results.
    """
    assessment = {
        'length': False,
        'complexity': False,
        'uniqueness': False,
        'strength': 'weak'
    }

    # Check password length
    if len(password) >= 12:
        assessment['length'] = True

    # Check password complexity
    if (re.search(r"[a-z]", password) and 
        re.search(r"[A-Z]", password) and 
        re.search(r"[0-9]", password) and 
        re.search(r"[!@#$%^&*()_+=-{};:'<>,./?]", password)):
        assessment['complexity'] = True

    # Check password uniqueness (simple implementation, can be improved)
    if len(set(password)) == len(password):
        assessment['uniqueness'] = True

    # Determine overall password strength
    if assessment['length'] and assessment['complexity'] and assessment['uniqueness']:
        assessment['strength'] = 'strong'
    elif assessment['length'] and assessment['complexity']:
        assessment['strength'] = 'medium'

    return assessment

def main():
    password = input("Enter a password: ")
    assessment = assess_password_strength(password)
    print("Password Strength Assessment:")
    print(f"Length: {assessment['length']}")
    print(f"Complexity: {assessment['complexity']}")
    print(f"Uniqueness: {assessment['uniqueness']}")
    print(f"Strength: {assessment['strength']}")

if __name__ == "__main__":
    main()
